/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.5 public/BlackHole.glb --types
*/

import * as THREE from "three";
import { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";
import { gsap } from "gsap";

type GLTFResult = GLTF & {
    nodes: {
        BlackHole_mesh: THREE.Mesh;
    };
    materials: {
        ["BlackHole:Blackhole_mat"]: THREE.MeshStandardMaterial;
    };
};

const textureLoader = new THREE.TextureLoader();

const BlackHole = (props: JSX.IntrinsicElements["group"]) => {
    const ref = useRef<THREE.Group>(null);

    const { nodes, materials, scene } = useGLTF("/BlackHole.glb") as GLTFResult;

    useEffect(() => {
        const goldMatcap = textureLoader.load("/sharp.png");
        const normalTexture = textureLoader.load("/Lava_005_NORM.jpg");
        goldMatcap.mapping = THREE.EquirectangularRefractionMapping;

        if (materials["BlackHole:Blackhole_mat"]) {
            materials["BlackHole:Blackhole_mat"].opacity = 1;
            materials["BlackHole:Blackhole_mat"].transparent = false;
            materials["BlackHole:Blackhole_mat"].envMap = goldMatcap;
            materials["BlackHole:Blackhole_mat"].normalMap = normalTexture;
            materials["BlackHole:Blackhole_mat"].normalScale.set(0.5, 0.5);
            materials["BlackHole:Blackhole_mat"].roughness = 0.3;
            materials["BlackHole:Blackhole_mat"].metalness = 0.5;
        }
    }, [nodes, materials]);

    useFrame(({ mouse }) => {
        if (!ref.current) return;

        // gsap.to(ref.current.rotation, {
        //     x: mouse.x,
        //     y: mouse.y,
        //     duration: 1,
        //     ease: "power2.out",
        // });

        gsap.to(ref.current.rotation, {
            // x: ref.current.rotation.x + 0.01,
            y: ref.current.rotation.y + 0.01,
            duration: 0.1,
            ease: "power2.out",
        });

        materials["BlackHole:Blackhole_mat"].normalScale.set(2 * mouse.x, 2 * mouse.y);
    });

    return (
        <group {...props} ref={ref} dispose={null}>
            <primitive object={scene} />
        </group>
    );
};

export default BlackHole;

useGLTF.preload("/BlackHole.glb");
